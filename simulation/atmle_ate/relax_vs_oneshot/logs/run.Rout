
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> .libPaths(c("/global/home/users/skyqiu/R/x86_64-pc-linux-gnu-library/4.2",
+             .libPaths()))
> library(purrr)
> library(torch)
> library(origami)
origami v1.0.7: Generalized Framework for Cross-Validation
> library(hal9001)
Loading required package: Rcpp
hal9001 v0.4.5: The Scalable Highly Adaptive Lasso
note: fit_hal defaults have changed. See ?fit_hal for details
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.1-6
> library(furrr)
Loading required package: future
> library(doMC)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> library(devtools)
Loading required package: usethis
Error in .make_numeric_version(x, strict, .standard_regexps()$valid_numeric_version) : 
  invalid non-character version specification 'x' (type: double)
> load_all()
ℹ Loading regTMLE
> registerDoMC(cores = availableCores()-1)
> `%+%` <- function(a, b) paste0(a, b)
> timestamp <- format(Sys.Date(), "%m%d") %+% "_" %+% format(Sys.time(), "%H%M%S")
> source("sim_data.R")
> set.seed(123)
> B <- 200
> n <- 500
> 
> res_df <- map_dfr(seq(B), function(.b) {
+   print(.b)
+   data <- sim_data(n)
+   W <- data[, grep("W", colnames(data))]
+   A <- data$A
+   Y <- data$Y
+   folds <- make_folds(n = n, V = 5)
+ 
+   # estimate P(A=1|W)
+   g1W <- learn_g(W = W,
+                  A = A,
+                  method = "glm",
+                  folds = folds,
+                  g_bounds = c(0.001, 0.999),
+                  cross_fit_nuisance = TRUE)
+ 
+   # estimate E(Y|W)
+   theta <- learn_theta(W = W,
+                        Y = Y,
+                        delta = rep(1, n),
+                        method = "glm",
+                        folds = folds,
+                        family = "gaussian",
+                        theta_bounds = NULL,
+                        cross_fit_nuisance = TRUE)
+ 
+   # estimate CATE
+   tau_A <- learn_tau_A(W = W,
+                        A = A,
+                        Y = Y,
+                        theta = theta,
+                        g1W = g1W,
+                        delta = rep(1, n),
+                        v_folds = 5,
+                        weights = rep(1, n),
+                        enumerate_basis_args = list(max_degree = 2,
+                                                    smoothness_orders = 1),
+                        browse = FALSE)
+   target_args <- list(W = W,
+                       A = A,
+                       Y = Y,
+                       theta = theta,
+                       g1W = g1W,
+                       delta = rep(1, n),
+                       pseudo_outcome = tau_A$pseudo_outcome,
+                       pseudo_weights = tau_A$pesudo_weights,
+                       X = tau_A$X,
+                       basis_list = tau_A$basis_list,
+                       X_hal = tau_A$X_hal,
+                       fit = tau_A$fit,
+                       dx = 1e-4,
+                       max_iter = 500,
+                       seq = TRUE,
+                       nlambda_max = 30,
+                       verbose = FALSE,
+                       browse = FALSE)
+   target_args_proj <- target_args; target_args_proj$grad_proj <- TRUE; target_args_proj$method <- "weak reg tmle"
+   #target_args_proj_cv <- target_args; target_args_proj_cv$grad_proj <- TRUE; target_args_proj_cv$method <- "cv reg tmle"
+   target_args_delta <- target_args; target_args_delta$grad_proj <- FALSE; target_args_delta$method <- "weak reg tmle"
+   #print("projection")
+   tau_proj <- do.call(target, target_args_proj)
+   #print("projection cv")
+   #tau_proj_cv <- do.call(target, target_args_proj_cv)
+   #print("delta method")
+   tau_delta <- do.call(target, target_args_delta)
+ 
+   # point estimate and inference
+   res_df <- map_dfr(seq(length(tau_proj)), function(.j) {
+     .proj <- tau_proj[[.j]]
+     #.proj_cv <- tau_proj_cv[[.j]]
+     .delta <- tau_delta[[.j]]
+ 
+     psi_proj <- mean(.proj$pred)
+     #psi_proj_cv <- mean(.proj_cv$pred)
+     psi_delta <- mean(.delta$pred)
+     eic_proj <- eic_ate(QW1 = theta+(1-g1W)*.proj$pred,
+                         QW0 = theta-g1W*.proj$pred,
+                         psi = psi_proj,
+                         A = A,
+                         g1W = g1W,
+                         Y = Y,
+                         QWA = theta+(A-g1W)*.proj$pred)
+     #eic_proj_cv <- eic_ate(QW1 = theta+(1-g1W)*.proj_cv$pred,
+     #                       QW0 = theta-g1W*.proj_cv$pred,
+     #                       psi = psi_proj_cv,
+     #                       A = A,
+     #                       g1W = g1W,
+     #                       Y = Y,
+     #                       QWA = theta+(A-g1W)*.proj_cv$pred)
+     eic_delta <- eic_ate_wm(x_basis = .delta$x_basis,
+                             g1W = g1W,
+                             A = A,
+                             Y = Y,
+                             theta = theta,
+                             tau = .delta$pred,
+                             eic_method = "diag")
+     se_proj <- sqrt(var(eic_proj, na.rm = TRUE) / n)
+     #se_proj_cv <- sqrt(var(eic_proj_cv, na.rm = TRUE) / n)
+     se_delta <- sqrt(var(eic_delta, na.rm = TRUE) / n)
+     lower_proj <- psi_proj - 1.96 * se_proj
+     upper_proj <- psi_proj + 1.96 * se_proj
+     #lower_proj_cv <- psi_proj_cv - 1.96 * se_proj_cv
+     #upper_proj_cv <- psi_proj_cv + 1.96 * se_proj_cv
+     lower_delta <- psi_delta - 1.96 * se_delta
+     upper_delta <- psi_delta + 1.96 * se_delta
+ 
+     return(data.frame(B = .b,
+                       j = .j,
+                       proj_lambda = .proj$lambda,
+                       #proj_cv_lambda = .proj_cv$lambda,
+                       delta_lambda = .delta$lambda,
+                       psi_proj = psi_proj,
+                       #psi_proj_cv = psi_proj_cv,
+                       psi_delta = psi_delta,
+                       se_proj = se_proj,
+                       #se_proj_cv = se_proj_cv,
+                       se_delta = se_delta,
+                       lower_proj = lower_proj,
+                       upper_proj = upper_proj,
+                       #lower_proj_cv = lower_proj_cv,
+                       #upper_proj_cv = upper_proj_cv,
+                       lower_delta = lower_delta,
+                       upper_delta = upper_delta))
+   })
+ 
+   return(res_df)
+ })
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 101
[1] 102
[1] 103
[1] 104
[1] 105
[1] 106
[1] 107
[1] 108
[1] 109
[1] 110
[1] 111
[1] 112
[1] 113
[1] 114
[1] 115
[1] 116
[1] 117
[1] 118
[1] 119
[1] 120
[1] 121
[1] 122
[1] 123
[1] 124
[1] 125
[1] 126
[1] 127
[1] 128
[1] 129
[1] 130
[1] 131
[1] 132
[1] 133
[1] 134
[1] 135
[1] 136
[1] 137
[1] 138
[1] 139
[1] 140
[1] 141
[1] 142
[1] 143
[1] 144
[1] 145
[1] 146
[1] 147
[1] 148
[1] 149
[1] 150
[1] 151
[1] 152
[1] 153
[1] 154
[1] 155
[1] 156
[1] 157
[1] 158
[1] 159
[1] 160
[1] 161
[1] 162
[1] 163
[1] 164
[1] 165
[1] 166
[1] 167
[1] 168
[1] 169
[1] 170
[1] 171
[1] 172
[1] 173
[1] 174
[1] 175
[1] 176
[1] 177
[1] 178
[1] 179
[1] 180
[1] 181
[1] 182
[1] 183
[1] 184
[1] 185
[1] 186
[1] 187
[1] 188
[1] 189
[1] 190
[1] 191
[1] 192
[1] 193
[1] 194
[1] 195
[1] 196
[1] 197
[1] 198
[1] 199
[1] 200
There were 50 or more warnings (use warnings() to see the first 50)
> 
> write.csv(res_df, file = "out/res_" %+% timestamp %+% ".csv", row.names = FALSE)
> 
> proc.time()
     user    system   elapsed 
12726.497   192.700   946.308 
